// Basic arithmetic and logical operations
00500113    // addi x2, x0, 5          # x2 = 5 (using addi, will convert to add+immediate)
00A00193    // addi x3, x0, 10         # x3 = 10 (using addi, will convert to add+immediate)
003100B3    // add x1, x2, x3          # x1 = x2 + x3 = 15
40310133    // sub x2, x2, x3          # x2 = x2 - x3 = -5
0031F233    // and x4, x3, x3          # x4 = x3 & x3 = 10 (changed from slt)
0041F2B3    // and x5, x3, x4          # x5 = x3 & x4 = 10
00416333    // or x6, x2, x4           # x6 = x2 | x4 = -5 (0xFFFFFFFFFFFFFFFB in 64-bit)
003163B3    // or x7, x2, x3           # x7 = x2 | x3 = -5 (changed from xor)

// So far,
x0 = 0
x1 = 15
x2 = -5
x3 = 10
x4 = 10
x5 = 10
x6 = -5
x7 = -5
//

// Load/Store operations
00000433    // add x8, x0, x0          # x8 = 0 (changed from addi)
00100513    // add x10, x0, x1         # x10 = 0 + x1 = 15 (for memory address calculation)
00A43023    // sd x10, 0(x8)           # Store x10 to memory at address in x8
00043483    // ld x9, 0(x8)            # Load from memory into x9 = 15

// More computation with supported instructions
00310533    // add x10, x2, x3         # x10 = x2 + x3 = 5
001105B3    // add x11, x2, x1         # x11 = x2 + x1 = 10

// Branches
00208663    // beq x1, x2, skip1       # Branch if equal (not taken since x1=15, x2=-5)
00300613    // add x12, x0, x3         # Should execute, x12 = 10
skip1:
00B50463    // beq x10, x11, skip2     # Branch if equal (not taken since x10=5, x11=10)
00400693    // add x13, x0, x4         # Should execute, x13 = 10
skip2:
00000713    // add x14, x0, x0         # Normal execution resumes, x14 = 0

// Additional computations
00A00793    // add x15, x0, x10        # x15 = x10 = 5
00B00813    // add x16, x0, x11        # x16 = x11 = 10
010808B3    // add x17, x16, x16       # x17 = x16 + x16 = 20
01088933    // add x18, x17, x16       # x18 = x17 + x16 = 30
012909B3    // add x19, x18, x18       # x19 = x18 + x18 = 60
00600A13    // add x20, x0, x6         # x20 = x6 = -5
00700A93    // add x21, x0, x7         # x21 = x7 = -5
015A0B33    // add x22, x20, x21       # x22 = x20 + x21 = -10
016B0BB3    // add x23, x22, x22       # x23 = x22 + x22 = -20
017B8C33    // add x24, x23, x23       # x24 = x23 + x23 = -40
00000CB3    // add x25, x0, x0         # x25 = 0
019C8D33    // add x26, x25, x25       # x26 = x25 + x25 = 0
00000DB3    // add x27, x0, x0         # x27 = 0
00000E33    // add x28, x0, x0         # x28 = 0
00000EB3    // add x29, x0, x0         # x29 = 0
00000F33    // add x30, x0, x0         # x30 = 0
00000FB3    // add x31, x0, x0         # x31 = 0

// End program
00000000    // Halt