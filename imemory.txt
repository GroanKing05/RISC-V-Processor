// Basic arithmetic and logical operations
00500113    // addi x2, x0, 5          # Initialize x2 = 5
00A00193    // addi x3, x0, 10         # Initialize x3 = 10
003100B3    // add x1, x2, x3          # x1 = x2 + x3 = 15
40310133    // sub x2, x2, x3          # x2 = x2 - x3 = -5
0021A233    // slt x4, x3, x2          # x4 = (x3 < x2) ? 1 : 0 = 0
0041F2B3    // and x5, x3, x4          # x5 = x3 & x4
00416333    // or x6, x2, x4           # x6 = x2 | x4
004143B3    // xor x7, x2, x4          # x7 = x2 ^ x4

// Memory operations
00002437    // lui x8, 2               # Load upper immediate x8 = 0x2000
06042223    // sw x0, 100(x8)          # Store 0 to memory
06442483    // lw x9, 100(x8)          # Load from same memory location

// Shifts
00119493    // slli x9, x3, 1          # Logical left shift x9 = x3 << 1
00115513    // srli x10, x2, 1         # Logical right shift x10 = x2 >> 1
40115593    // srai x11, x2, 1         # Arithmetic right shift x11 = x2 >> 1

// Branches and jumps
00208663    // beq x1, x2, skip1       # Branch if equal (not taken)
00300613    // addi x12, x0, 3         # Should execute
skip1:
00B50463    // beq x10, x11, skip2     # Branch if equal (taken)
00400693    // addi x13, x0, 4         # Should not execute
skip2:
00000713    // addi x14, x0, 0         # Normal execution resumes

// Load immediate values
FFF00793    // addi x15, x0, -1        # Load -1
00078813    // addi x16, x15, 0        # Copy value
00080893    // addi x17, x16, 0        # Another copy

// More arithmetic
010808B3    // add x17, x16, x16       # Double the value
41080933    // sub x18, x16, x16       # Should be zero

// Store word operations
06F42423    // sw x15, 104(x8)         # Store -1 to memory
06842983    // lw x19, 104(x8)         # Load it back

// Test immediate operations with maximum values
7FF00A13    // addi x20, x0, 2047      # Maximum positive immediate
80000A37    // lui x20, 0x80000        # Load upper bits

// Complex arithmetic sequence
00140A93    // addi x21, x8, 1         # x21 = x8 + 1
015A0B33    // add x22, x20, x21       # x22 = x20 + x21
016B0BB3    // add x23, x22, x22       # x23 = x22 + x22
417B8C33    // sub x24, x23, x23       # x24 should be 0

// Final memory operations
078A2023    // sw x24, 0(x20)          # Store to address in x20
00002A37    // lui x20, 2              # Reset x20 to reasonable value
000A2083    // lw x1, 0(x20)           # Load from new address

// Program end (optional halt instruction)
00000000    // Halt (all zeros)